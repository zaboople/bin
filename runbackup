
#Functions:
function msg() {
  echo -e $(date '+%H:%M:%S.%N')" $@"
}
function getBackupTo() {
  backupTo="${BACKUP_TO}/$backupDateStamp"
  echo "$backupTo"
}
function makeBackupFile() {
  if [[ ! $BACKUP_PREFIX ]]; then
    BACKUP_PREFIX=$(echo $BACKUP_ITEMS | sed -r 's-( |/)--g')
  fi
  backupFile=${BACKUP_PREFIX}.zip
  if [[ "$BACKUP_WORKING_DIR" ]]; then
    workingFile="${BACKUP_WORKING_DIR}/${backupFile}"
  else
    workingFile="${BACKUP_FROM}/${backupFile}"
  fi
  echo "Backup file: $workingFile"
  cd "$BACKUP_FROM" || exit 1
  rm -f "${workingFile}"
  rm -f "${workingFile}.cpt"
  msg "Source size (MB): \n$(du -sm $BACKUP_ITEMS)"
  msg "Making zip file ${workingFile}..."
  zip -r "${workingFile}" $BACKUP_ITEMS  || exit 1
  msg "Backup size (MB): \n"$(du -sm "${workingFile}")

  msg 'Encrypting...'
  echo "$password" | ccrypt -e -k - "${workingFile}" || exit 1
  msg "Encrypted size (MB): \n"$(du -sm "${workingFile}.cpt") || exit 1

  backupTo=$(getBackupTo)
  mkdir -p $backupTo || exit 1
  msg "Copying backup to $backupTo..."
  rm -f "${backupTo}/${backupFile}"
  rm -f "${backupTo}/${backupFile}.cpt"
  cp "${workingFile}.cpt" "$backupTo" || exit 1
  for name in $BACKUP_ITEMS
    do
    echo "$name" >> ${backupTo}/${backupFile}.contents.txt
    done
  du -sm ${backupTo}/*
  rm "${workingFile}.cpt"
}


function init() {
  if [[ ! $backupDateStamp ]]; then

    #Password:
    if [[ $BACKUP_PASS ]]; then
      password=${BACKUP_PASS}
    else
      printf 'Enter encryption password: '
      if [[ $OPEN_PASSWORD ]]; then
        read password || exit 1
        echo ''
      else
        read -s password || exit 1
        echo ''
        printf 'Confirm password: '
        read -s confirm || exit 1
        echo ''
        if [[ $password != $confirm ]]; then
          echo "Error: Passwords do not match"
          exit 1
        fi
      fi
    fi

    # File names:
    backupDateStamp=$(date +'%Y-%m-%d_%H-%M-%S')
  fi
}


function formatStuff() {
  printf "  %-20s %-25s %-40s\n" "$@"
}
function formatStuff2() {
  printf "  %-20s %-25s\n" "$@"
}

function help() {
  echo "Required settings: "
  formatStuff2 "BACKUP_TO"          "$BACKUP_TO"
  formatStuff2 "BACKUP_FROM"        "$BACKUP_FROM"
  formatStuff2 "BACKUP_ITEMS"       "$BACKUP_ITEMS"
  echo "Optional settings: "
  formatStuff "BACKUP_PREFIX"       "$BACKUP_PREFIX"       "(default: BACKUP_ITEMS w/ spaces/slashes removed)"
  formatStuff "BACKUP_WORKING_DIR"  "$BACKUP_WORKING_DIR"  "(default: BACKUP_FROM)"
  formatStuff "OPEN_PASSWORD"       "$OPEN_PASSWORD"       "(default: 0)"
}

function checkConfig() {
  if [[ ! $BACKUP_TO ]]; then
    echo "Missing: BACKUP_TO"
    help
    exit 1
  elif [[ ! $BACKUP_FROM ]]; then
    echo "Missing: BACKUP_FROM"
    help
    exit 1
  elif [[ ! $BACKUP_ITEMS ]]; then
    echo "Missing: BACKUP_ITEMS"
    help
    exit 1
  fi
  help
}

function readConfig() {
  unset BACKUP_TO
  unset BACKUP_FROM
  unset BACKUP_ITEMS
  unset BACKUP_PREFIX
  source "$1" || exit 1
  checkConfig
}


if [[ $1 == -h* ]]; then
  help
  exit 0
elif [[ $1 ]]; then
  echo "------------------------------"
  while [[ $1 ]]; do
    readConfig "$1"
    shift
    init || exit 1
    makeBackupFile
    echo "------------------------------"
  done
else
  checkConfig
  init || exit 1
  echo "------------------------------"
  makeBackupFile
  echo "------------------------------"
fi

#Finish up diagnostics:
msg 'Finished.'
